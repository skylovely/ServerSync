//
//  ServerSync.swift
//  SkyLovely-iOS
//
//  Created by PJ on 17/11/2016.
//  Copyright © 2016 SkyLovely Pty Ltd. All rights reserved.
//

import Foundation


extension NSDate {
    private struct Internal {
        //The difference between server's UTC time and client's UTC time (in nanoseconds)
        // Δ > 0 => client is behind server
        // Δ < 0 => client is ahead of server
        static var Δ: Int64 = 0
        
        static var firstValue: Bool = true
        
        //The coefficient representing the difference between the request side Latency and the response side Latency such that
        // Lreq = ω * Lres, where usually ω>1 but can be approximated as exactly 1.0
        static var ω: Double = 1.1
        
        //This is the smoothing coefficient for calculating exponential moving average
        // 0 < smoothing ≤ 1, where a higher value means more emphasis on recent values over past values
        static var smoothing: Double = 0.5
        
        //If the new delta exceeds shockThreshold, we should assume that something extraordinary happened and ignore that value
        static var shockThreshold: Int64 = 0
    }
    
    static var offset: Int64 {
        get {
        return Internal.Δ
        }
        set {
            Internal.Δ = newValue
        }
    }
    
    static var smoothing: Double {
        get {
            return Internal.smoothing
        }
        set {
            Internal.smoothing = newValue
        }
    }
    
    static var latencyCoefficient: Double {
        get {
        return Internal.ω
        }
        set {
            Internal.ω = newValue
        }
    }
    
    static var shockThreshold: Int64 {
        get {
            return Internal.shockThreshold
        }
        set {
            Internal.shockThreshold = newValue
        }
    }
    
    // Delta must be in nanoseconds
    static func updateOffset(delta: Int64) -> Int64 {
        if Internal.shockThreshold != 0 && (delta > Internal.shockThreshold || delta < -Internal.shockThreshold ) { return Internal.Δ }
        
        let smoothing: Double = Internal.smoothing
        //newvalue = smoothing * next + (1 - smoothing)*old value
        //Internal.Δ = smoothing * delta + (1 - smoothing)*Internal.Δ
        if Internal.firstValue {
            Internal.Δ = delta
        } else {
            Internal.Δ = Int64(smoothing * Double(delta - Internal.Δ)) + Internal.Δ
        }
        Internal.firstValue = false
        return Internal.Δ
    }
    
    //Delta must be in milliseconds
    static func updateOffsetMilli(delta: Int64) -> Int64 {
        let nDelta = delta * 1_000_000
        return updateOffset(nDelta) / 1_000_000
    }
    
    //Delta must be in seconds
    static func updateOffsetSec(delta: Int64) -> Int64 {
        let sDelta = delta * 1_000_000_000
        return updateOffset(sDelta) / 1_000_000_000
    }
    
    static func UTCToUnixNano() -> Int64 {
        return Int64(NSDate().timeIntervalSince1970 * 1_000_000_000)
    }
    
    func UTCToUnixNano() -> Int64 {
        return Int64(self.timeIntervalSince1970 * 1_000_000_000)
    }
    
    //If you can control the response generated by the server, then you can use this technique:
    // -clientRequestUTCUnixNano: Before the client sends the request, you record the client-side UTC Unix time in nanoseconds
    // -serverOperationDurationNano: The server should respond with how long it took to process the response from start of receiving request to start of sending out response. If you don't have access to the server, you can approximate this value to 0
    // -serverUTCUnixNano: The server should respond with it's internal UTC time in UTC Unix time in nanoseconds - preferably as late as possible before sending response.
    static func updateOffsetRaw(clientRequestUTCUnixNano: Int64, serverOperationDurationNano: Int64, serverUTCUnixNano: Int64) -> Int64 {
        
        //Current client UTC time in Unix (Nanoseconds)
        let clientResponseTimeNano: Int64 = Int64(NSDate().timeIntervalSince1970 * 1_000_000_000)
        
        //Calculate response side Latency
        let L_res: Int64 = Int64(Double(clientResponseTimeNano - clientRequestUTCUnixNano - serverOperationDurationNano)/(1+Internal.ω))
        
        return updateOffset((serverUTCUnixNano + L_res) - clientResponseTimeNano)
    }
    
    static func serverUTC() -> NSDate {
        return NSDate().dateByAddingTimeInterval(NSTimeInterval(Internal.Δ / 1_000_000_000))
    }

    static func reset() {
        Internal.Δ = 0
        Internal.firstValue = true
        return
    }
    
    // Calibrate a NSDate that is based on server's UTC time to client's UTC time
    func toClientTime() -> NSDate {
        return self.dateByAddingTimeInterval(-NSTimeInterval(Internal.Δ / 1_000_000_000))
    }
    
    // Calibrate a NSDate that is based on client's UTC time to server's UTC time
    func toServerTime() -> NSDate {
        return self.dateByAddingTimeInterval(NSTimeInterval(Internal.Δ / 1_000_000_000))
    }
    
}